// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// models for nextauth

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                          String                       @id @default(cuid())
  name                        String?
  email                       String?                      @unique
  emailVerified               DateTime?
  image                       String?
  accounts                    Account[]
  sessions                    Session[]
  minecraftAccounts           MinecraftAccount[]
  minecraftServers            MinecraftServer[]
  minecraftServerAuthRequests MinecraftServerAuthRequest[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// models for others

model MinecraftServer {
  id        Int      @id @default(autoincrement())
  name      String
  outline   String
  avatar    String
  ip        String
  port      Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@map("minecraft_server")
}

model MinecraftAuthRequest {
  id        String   @id @default(uuid())
  edition   String
  name      String
  mcid      String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([edition, mcid])
}

model MinecraftAccount {
  id        String   @id @default(uuid())
  edition   String
  name      String
  mcid      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")

  @@unique([edition, mcid])
}

model MinecraftServerAuthRequest {
  id        String   @id @default(uuid())
  ip        String
  port      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")

  @@unique([ip, port])
}
